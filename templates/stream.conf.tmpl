{{ $upstreams := dict }}
{{ $label_prefix := (env "NGINX_LABEL_PREFIX") }}
{{ $app_label := env "NGINX_APP_LABEL" }}
{{ $process_label := env "NGINX_PROCESS_LABEL" }}
{{ $web_process := env "NGINX_WEB_PROCESS" }}
{{ $default_network := env "NGINX_DEFAULT_NETWORK" }}
{{ range $app, $appContainers := groupByLabel $ $app_label }}

{{ $all_app_containers := dict }}
{{ range $process_type, $containers := groupByLabel $appContainers $process_label }}
{{ $_ := set $all_app_containers $process_type $containers }}
{{ $first_container := index $containers 0 }}
{{ $initial_network := when (contains $first_container.Labels (printf "%sinitial-network" $label_prefix)) (index $first_container.Labels (printf "%sinitial-network" $label_prefix)) $default_network }}
{{ $port_mappings := split (trim (when (contains $first_container.Labels (printf "%sport-mapping" $label_prefix)) (index $first_container.Labels (printf "%sport-mapping" $label_prefix)) "http:80:5000")) " " }}
{{ range $_, $port_map := $port_mappings  }}
{{ $scheme := index (split $port_map ":") 0 }}
{{ if or (eq $scheme "tcp") (eq $scheme "udp") }}
{{ $container_port := index (split $port_map ":") 2 }}

{{ $upstream_name := printf "%s-%s-%s" $app $process_type $container_port }}
{{ if not (contains $upstreams $upstream_name) }}
{{ $_ := set $upstreams $upstream_name true }}
upstream {{ $app }}-{{ $process_type }}-{{ $container_port }}-{{ $scheme }} {
{{ range $_, $container := $containers }}
{{ range $_, $network := $container.Networks }}
{{ if eq $network.Name $initial_network }}
    server {{ $container.IP }}:{{ $container_port }}; # network={{ $network.Name }}
{{ end }}{{/* endif initial_network */}}
{{ end }}{{/* endrange networks */}}
{{ end }}{{/* endrange containers */}}
}
{{ end }}{{/* endif scheme in tcp|udp */}}
{{ end }}{{/* endif contains upstream_name */}}
{{ end }}{{/* endrange port_mappings */}}
{{ end }}{{/* endrange groupByLabel appContainers */}}

{{ if (contains $all_app_containers $web_process) }}
{{ $web_containers := get $all_app_containers $web_process }}
{{ $first_container := index $web_containers 0 }}
{{ $port_mappings := split (trim (when (contains $first_container.Labels (printf "%sport-mapping" $label_prefix)) (index $first_container.Labels (printf "%sport-mapping" $label_prefix)) "http:80:5000")) " " }}
{{ range $_, $port_map := $port_mappings  }}
{{ $scheme := index (split $port_map ":") 0 }}
{{ $host_port := index (split $port_map ":") 1 }}
{{ $container_port := index (split $port_map ":") 2 }}

{{ if or (eq $scheme "tcp") (eq $scheme "udp") }}
server {
    listen     {{ $host_port }}{{ if eq $scheme "udp"}} udp{{ end }};
    proxy_pass {{ $app }}-{{ $web_process }}-{{ $container_port }}-{{ $scheme }};
    {{ range $label, $base64Value := $first_container.Labels }}
    {{ if hasPrefix (printf "%sinclude-%s-" $label_prefix $scheme) $label }}
    # {{ $label }}
{{ indent 4 (b64dec $base64Value) }}
    {{ end }}
    {{ end }}
}
{{ end }}{{/* endif scheme in tcp|udp */}}

{{ end }}{{/* endrange port_mappings */}}
{{ end }}{{/* endif contains web_process */}}
{{ end }}